name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        ruby-version: ['3.2', '3.3']
        
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
        
    - name: Create test Rails app from template
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        REDIS_URL: redis://localhost:6379/0
      run: |
        mkdir -p /tmp/test_app
        cd /tmp/test_app
        rails new myapp --dev -m ${{ github.workspace }}/scaffold/template.rb --skip-git --database=postgresql
        cd myapp
        
    - name: Set up test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd /tmp/test_app/myapp
        cp .env.example .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        bin/rails db:create
        bin/rails db:migrate
        
    - name: Run tests on generated app
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd /tmp/test_app/myapp
        bin/rails test
        
    - name: Test synth CLI
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd /tmp/test_app/myapp
        bin/synth list
        bin/synth add ai
        bin/synth list

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
        
    - name: Install linting dependencies
      run: |
        gem install rubocop
        
    - name: Run RuboCop
      run: |
        rubocop scaffold/ --format github
        
  validate-configs:
    runs-on: ubuntu-latest
    needs: [test]
    if: success()
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Install Kamal
      run: |
        gem install kamal
        
    - name: Create test Rails app with deploy module
      run: |
        mkdir -p /tmp/test_app
        cd /tmp/test_app
        rails new myapp --dev -m ${{ github.workspace }}/scaffold/template.rb --skip-git --database=postgresql
        cd myapp
        bin/synth add deploy
        
    - name: Validate Fly.io configuration
      run: |
        cd /tmp/test_app/myapp
        if [ -f fly.toml ]; then
          flyctl validate
        else
          echo "fly.toml not found, skipping validation"
        fi
        
    - name: Validate Kamal configuration
      run: |
        cd /tmp/test_app/myapp
        if [ -f config/deploy.yml ]; then
          kamal config
        else
          echo "config/deploy.yml not found, skipping validation"
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, lint, validate-configs]
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Create test Rails app with deploy module  
      run: |
        mkdir -p /tmp/test_app
        cd /tmp/test_app
        rails new myapp --dev -m ${{ github.workspace }}/scaffold/template.rb --skip-git --database=postgresql
        cd myapp
        bin/synth add deploy
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: /tmp/test_app/myapp
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max