name: Rails SaaS Starter Template Test Matrix

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        ruby-version: ['3.2', '3.3']
        rails-version: ['7.2.2', 'edge']
        postgres-version: ['14', '15', '16']
        
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rails_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/rails_test
      REDIS_URL: redis://localhost:6379/0
      CI: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: false

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install PostgreSQL extensions
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        PGPASSWORD=postgres psql -h localhost -U postgres -d rails_test -c "CREATE EXTENSION IF NOT EXISTS vector;"

    - name: Install Rails Edge
      run: |
        if [ "${{ matrix.rails-version }}" = "edge" ]; then
          gem install rails --pre --no-document
        else
          gem install rails -v "${{ matrix.rails-version }}" --no-document
        fi

    - name: Generate new Rails app from template
      run: |
        mkdir -p /tmp/test_app
        cd /tmp/test_app
        rails new myapp --dev -m $GITHUB_WORKSPACE/scaffold/template.rb \
          --database=postgresql \
          --skip-git \
          --skip-docker \
          --skip-bundle

    - name: Set up test app environment
      working-directory: /tmp/test_app/myapp
      run: |
        # Create .env file for testing
        cat > .env << EOF
        DATABASE_URL=${{ env.DATABASE_URL }}
        REDIS_URL=${{ env.REDIS_URL }}
        RAILS_ENV=test
        EOF
        
        # Configure database for testing
        cat > config/database.yml << EOF
        test:
          adapter: postgresql
          encoding: unicode
          database: rails_test
          username: postgres
          password: postgres
          host: localhost
          port: 5432
        EOF

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: /tmp/test_app/myapp/vendor/bundle
        key: ${{ runner.os }}-gems-ruby-${{ matrix.ruby-version }}-rails-${{ matrix.rails-version }}-${{ hashFiles('/tmp/test_app/myapp/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-ruby-${{ matrix.ruby-version }}-rails-${{ matrix.rails-version }}-
          ${{ runner.os }}-gems-ruby-${{ matrix.ruby-version }}-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: /tmp/test_app/myapp/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('/tmp/test_app/myapp/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Ruby dependencies
      working-directory: /tmp/test_app/myapp
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        # Install TOML gem for deployment config validation
        gem install toml-rb --no-document

    - name: Install JavaScript dependencies
      working-directory: /tmp/test_app/myapp
      run: |
        if [ -f "yarn.lock" ]; then
          yarn install --frozen-lockfile
        elif [ -f "package-lock.json" ]; then
          npm ci
        elif [ -f "package.json" ]; then
          npm install
        else
          echo "No JavaScript package manager files found, skipping JS dependencies"
        fi

    - name: Set up database
      working-directory: /tmp/test_app/myapp
      run: |
        bin/rails db:create
        bin/rails db:migrate

    - name: Precompile assets
      working-directory: /tmp/test_app/myapp
      run: |
        bin/rails assets:precompile

    - name: Run test suite
      working-directory: /tmp/test_app/myapp
      run: |
        # Run RSpec if available, otherwise fall back to Rails test
        if [ -f "spec/rails_helper.rb" ]; then
          bundle exec rspec --format documentation --format json --out tmp/rspec_results.json
        else
          bin/rails test
        fi

    - name: Test all synth modules functionality
      working-directory: /tmp/test_app/myapp
      run: |
        # Test the synth CLI tool comprehensive functionality
        echo "Testing comprehensive synth CLI functionality..."
        bin/synth help
        bin/synth list
        bin/synth doctor
        
        # Get list of available modules that aren't already installed
        echo "Testing additional module installation..."
        AVAILABLE_MODULES=$(bin/synth list | grep -E "^\s*[a-z_]+" | grep -v "âœ…" | awk '{print $1}' | grep -v "Available" | grep -v "Installed" | head -8)
        
        # Install additional available modules (with error handling)
        for module in $AVAILABLE_MODULES; do
          if [[ -n "$module" && "$module" != "modules:" && "$module" != "(none)" ]]; then
            echo "Testing installation of module: $module"
            bin/synth add "$module" || echo "Note: Module $module installation failed or already installed"
          fi
        done
        
        # List final state
        echo "Final module state:"
        bin/synth list
        
        # Test AI functionality if available
        if bin/synth list | grep -q "ai"; then
          echo "Testing AI module..."
          bin/synth test ai || echo "AI tests not available"
        fi
        
        # Test other modules if available
        if bin/synth list | grep -q "billing"; then
          echo "Billing module detected"
        fi
        
        if bin/synth list | grep -q "admin"; then
          echo "Admin module detected"  
        fi

    - name: Test deployment configurations (dry-run)
      working-directory: /tmp/test_app/myapp
      run: |
        # Test Fly.io configuration if present
        if [ -f "fly.toml" ]; then
          echo "Testing Fly.io configuration syntax..."
          # Validate fly.toml syntax (basic TOML parsing)
          ruby -e "require 'toml-rb'; TomlRB.load_file('fly.toml'); puts 'fly.toml is valid'" || echo "fly.toml validation failed"
        fi
        
        # Test Render configuration if present
        if [ -f "render.yaml" ]; then
          echo "Testing Render configuration syntax..."
          # Validate render.yaml syntax
          ruby -e "require 'yaml'; YAML.load_file('render.yaml'); puts 'render.yaml is valid'" || echo "render.yaml validation failed"
        fi
        
        # Test Kamal configuration if present
        if [ -f "config/deploy.yml" ]; then
          echo "Testing Kamal configuration syntax..."
          ruby -e "require 'yaml'; YAML.load_file('config/deploy.yml'); puts 'Kamal config is valid'" || echo "Kamal config validation failed"
        fi

    - name: Check for deprecation warnings
      working-directory: /tmp/test_app/myapp
      run: |
        # Run a simple Rails command to check for deprecation warnings
        output=$(bin/rails runner "puts 'Checking for deprecations...'" 2>&1)
        if echo "$output" | grep -i "deprecation\|deprecated"; then
          echo "Deprecation warnings found:"
          echo "$output" | grep -i "deprecation\|deprecated"
          exit 1
        else
          echo "No deprecation warnings found"
        fi

    - name: Generate test coverage report
      working-directory: /tmp/test_app/myapp
      if: always()
      run: |
        if [ -f "coverage/.resultset.json" ]; then
          echo "Test coverage report available"
          # Could integrate with coveralls, codecov, etc. here
        else
          echo "No coverage report generated"
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-artifacts-ruby-${{ matrix.ruby-version }}-rails-${{ matrix.rails-version }}-postgres-${{ matrix.postgres-version }}
        path: |
          /tmp/test_app/myapp/log/
          /tmp/test_app/myapp/tmp/rspec_results.json
        retention-days: 7